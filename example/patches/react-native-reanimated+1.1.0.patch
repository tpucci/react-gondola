diff --git a/node_modules/react-native-reanimated/react-native-reanimated.d.ts b/node_modules/react-native-reanimated/react-native-reanimated.d.ts
index 7a30d62..506a2a7 100644
--- a/node_modules/react-native-reanimated/react-native-reanimated.d.ts
+++ b/node_modules/react-native-reanimated/react-native-reanimated.d.ts
@@ -12,6 +12,7 @@ declare module 'react-native-reanimated' {
     ViewStyle,
     TextStyle,
     ImageStyle,
+    TransformsStyle
   } from 'react-native';
   namespace Animated {
     class AnimatedNode<T> {
@@ -64,11 +65,11 @@ declare module 'react-native-reanimated' {
       right: Adaptable<number>
     ) => AnimatedNode<T>;
     type UnaryOperator = (value: Adaptable<number>) => AnimatedNode<number>;
-    type MultiOperator = (
+    type MultiOperator<T = number> = (
       a: Adaptable<number>,
       b: Adaptable<number>,
       ...others: Adaptable<number>[]
-    ) => AnimatedNode<number>;
+    ) => AnimatedNode<T>;
 
     export interface DecayState {
       finished: AnimatedValue<number>;
@@ -141,8 +142,10 @@ declare module 'react-native-reanimated' {
 
     export const SpringUtils: SpringUtils
 
+    type AnimatedTransform = { [P in keyof TransformsStyle["transform"]]: Animated.Adaptable<TransformsStyle["transform"][P]> };
+
     type AnimateStyle<S extends object> = {
-      [K in keyof S]: S[K] extends ReadonlyArray<any>
+      [K in keyof S]: K extends 'transform' ? AnimatedTransform : (S[K] extends ReadonlyArray<any>
         ? ReadonlyArray<AnimateStyle<S[K][0]>>
         : S[K] extends object
           ? AnimateStyle<S[K]>
@@ -151,7 +154,7 @@ declare module 'react-native-reanimated' {
               | AnimatedNode<
                   // allow `number` where `string` normally is to support colors
                   S[K] extends string ? S[K] | number : S[K]
-                >
+                >)
     };
 
     type AnimateProps<
@@ -195,6 +198,7 @@ declare module 'react-native-reanimated' {
     export const pow: MultiOperator;
     export const modulo: MultiOperator;
     export const sqrt: UnaryOperator;
+    export const log: UnaryOperator;
     export const sin: UnaryOperator;
     export const cos: UnaryOperator;
     export const tan: UnaryOperator;
